version: "3.8"
services:
  proxy:
    image: traefik:latest
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.entrypoints=https
      - traefik.http.routers.traefik.rule=Host(`traefik.${BASE_DOMAIN}`)
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.certresolver=letsencrypt
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.services.traefik.loadbalancer.server.port=8080
    ports:
      - 80:80
      - 443:443
      - 8000:8000
    volumes:
      - ./traefik.yml:/traefik.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - ./letsencrypt/:/etc/traefik/acme/
      - ./oauth2_config.json:/oauth2_config.json
    networks:
      proxy:


  health:
    image: ghcr.io/slntopp/nocloud/health:latest
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
    labels:
      - traefik.enable=true
      - traefik.http.routers.health.rule=Host(`api.${BASE_DOMAIN}`)
      - traefik.http.routers.health.rule=PathPrefix("/nocloud.health.")
      - traefik.http.routers.health.tls=true
      - traefik.http.routers.health.tls.certresolver=letsencrypt
      - traefik.http.routers.health.entrypoints=grpc
      - traefik.http.services.health.loadbalancer.server.port=8000
      - traefik.http.services.health.loadbalancer.server.scheme=h2c
    environment:
      LOG_LEVEL: 0
      PORT: 8000
      SIGNING_KEY: "${SIGNING_KEY}"
      PROBABLES: registry:8000,billing:8000,services-registry:8000,sp-registry:8000,settings:8000,dns-mgmt:8000,edge:8000
      REDIS_HOST: redis_settings:6379
    networks:
      - proxy
      - grpc-internal
      - redis
    volumes:
      - ./oauth2_config.json:/oauth2_config.json

  web:
    image: ghcr.io/slntopp/nocloud/apiserver-web:latest
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
    depends_on:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.web.entrypoints=https
      - traefik.http.routers.web.rule=Host(`api.${BASE_DOMAIN}`)
      - traefik.http.routers.web.tls=true
      - traefik.http.routers.web.tls.certresolver=letsencrypt

      - traefik.http.routers.web.service=web@docker
      - traefik.http.services.web.loadbalancer.server.port=8000

      - traefik.http.routers.web_ui.rule=Host(`api.${BASE_DOMAIN}`)&&PathPrefix(`/admin`)
      - traefik.http.routers.web_ui.entrypoints=https
      - traefik.http.routers.web_ui.tls=true
      - traefik.http.routers.web_ui.tls.certresolver=letsencrypt
      - traefik.http.routers.web_ui.service=web_ui@docker
      - traefik.http.routers.web_ui.middlewares=web_ui_stripprefix
      - traefik.http.middlewares.web_ui_stripprefix.stripprefix.prefixes=/admin
      - traefik.http.services.web_ui.loadbalancer.server.port=8080

      - "traefik.http.middlewares.web_cors.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,DELETE,PATCH,HEAD"
      - "traefik.http.middlewares.web_cors.headers.accesscontrolalloworiginlist=https://*.${BASE_DOMAIN}"
      - "traefik.http.middlewares.web_cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.web_cors.headers.accesscontrolallowcredentials=true"
      - "traefik.http.middlewares.web_cors.headers.addvaryheader=false"
    environment:
      LOG_LEVEL: 0
      WITH_BLOCK: "true"
      APISERVER_HOST: "api.${BASE_DOMAIN}:8000"
      INSECURE: "false"
      CORS_ALLOWED: "https://app.${BASE_DOMAIN},https://*"
    networks:
      - proxy
    volumes:
      - ./oauth2_config.json:/oauth2_config.json

  app:
    image: ghcr.io/support-pl/nocloud-app:latest
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
    depends_on:
      - proxy
    labels:
      - nocloud.update=true
      - traefik.enable=true
      - traefik.http.routers.app.entrypoints=https
      - traefik.http.routers.app.rule=Host(`app.${BASE_DOMAIN}`)
      - traefik.http.routers.app.tls=true
      - traefik.http.routers.app.tls.certresolver=letsencrypt
      - traefik.http.services.app.loadbalancer.server.port=8080
    environment:
      BASE_URL: "https://api.${BASE_DOMAIN}/"
    networks:
      proxy:
    volumes:
      - ./app_config/config.json:/dist/config.json
#      - ./app_config/logo.png:/dist/logo.png


  # iproxy:
  #   image: ghcr.io/slntopp/nocloud/proxy:latest
  #   restart: always
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.iproxy.entrypoints=https
  #     - traefik.http.routers.iproxy.rule=HostRegexp(`{sp:[a-z0-9\-]+}.proxy.${BASE_DOMAIN}`)
  #     - traefik.http.routers.iproxy.tls=true
  #     - traefik.http.routers.iproxy.tls.certresolver=letsencrypt_wild
  #     - traefik.http.routers.iproxy.tls.domains[0].main=proxy.${BASE_DOMAIN}
  #     - traefik.http.routers.iproxy.tls.domains[0].sans=*.proxy.${BASE_DOMAIN}
  #     - traefik.http.services.iproxy.loadbalancer.server.port=8000
  #   environment:
  #     LOG_LEVEL: -1
  #     SIGNING_KEY: "${SIGNING_KEY}"
  #     DB_HOST: db:8529
  #     DB_CRED: "${DB_USER}:${DB_PASS}"
  #   networks:
  #     - proxy
  #     - arangodb
  #   links:
  #     - db

  registry:
    image: ghcr.io/slntopp/nocloud/registry:latest
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
    labels:
      - traefik.enable=true
      - traefik.http.routers.registry.rule=Host(`api.${BASE_DOMAIN}`)
      - traefik.http.routers.registry.rule=PathPrefix("/nocloud.registry.")
      - traefik.http.routers.registry.tls=true
      - traefik.http.routers.registry.tls.certresolver=letsencrypt
      - traefik.http.routers.registry.entrypoints=grpc
      - traefik.http.services.registry.loadbalancer.server.port=8000
      - traefik.http.services.registry.loadbalancer.server.scheme=h2c
    environment:
      LOG_LEVEL: 0
      PORT: 8000
      DB_HOST: db:8529
      DB_CRED: "${DB_USER}:${DB_PASS}"
      NOCLOUD_ROOT_PASSWORD: "${NOCLOUD_ROOT_PASS}"
      SIGNING_KEY: "${SIGNING_KEY}"
      SETTINGS_HOST: settings:8000
      REDIS_HOST: redis_settings:6379
    depends_on:
      - db
    networks:
      - proxy
      - arangodb
      - grpc-internal
      - redis
    links:
      - db
    volumes:
      - ./oauth2_config.json:/oauth2_config.json


  services-registry:
    image: ghcr.io/slntopp/nocloud/services-registry:latest
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
    labels:
      - traefik.enable=true
      - traefik.http.routers.services.rule=Host(`api.${BASE_DOMAIN}`)
      - traefik.http.routers.services.rule=PathPrefix("/nocloud.services.", "/nocloud.instances.")
      - traefik.http.routers.services.tls=true
      - traefik.http.routers.services.tls.certresolver=letsencrypt
      - traefik.http.routers.services.entrypoints=grpc
      - traefik.http.services.services.loadbalancer.server.port=8000
      - traefik.http.services.services.loadbalancer.server.scheme=h2c
    environment:
      LOG_LEVEL: -1
      PORT: 8000
      SIGNING_KEY: "${SIGNING_KEY}"
      DB_HOST: db:8529
      DB_CRED: "${DB_USER}:${DB_PASS}"
      SETTINGS_HOST: settings:8000
      BILLING_HOST: billing:8000
      DRIVERS: driver-ione:8080 driver-virtual:8080
      RABBITMQ_CONN: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
      REDIS_HOST: redis_settings:6379
    depends_on:
      - db
      - billing
      - driver-ione
    networks:
      - proxy
      - arangodb
      - grpc-internal
      - mq
      - redis
    links:
      - db
      - billing
    volumes:
      - ./oauth2_config.json:/oauth2_config.json

  sp-registry:
    image: ghcr.io/slntopp/nocloud/sp-registry:latest
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
    labels:
      - traefik.enable=true
      - traefik.http.routers.services_providers.rule=Host(`api.${BASE_DOMAIN}`)
      - traefik.http.routers.services_providers.rule=PathPrefix("/nocloud.services_providers.", "/nocloud.showcases.")
      - traefik.http.routers.services_providers.tls=true
      - traefik.http.routers.services_providers.tls.certresolver=letsencrypt
      - traefik.http.routers.services_providers.entrypoints=grpc
      - traefik.http.services.services_providers.loadbalancer.server.port=8000
      - traefik.http.services.services_providers.loadbalancer.server.scheme=h2c
    environment:
      LOG_LEVEL: 0
      PORT: 8000
      SIGNING_KEY: "${SIGNING_KEY}"
      DB_HOST: db:8529
      DB_CRED: "${DB_USER}:${DB_PASS}"
      SETTINGS_HOST: settings:8000
      DRIVERS: driver-ione:8080 driver-virtual:8080
      RABBITMQ_CONN: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
      REDIS_HOST: redis_settings:6379
    depends_on:
      - db
      - driver-ione
    networks:
      - proxy
      - arangodb
      - grpc-internal
      - mq
      - redis
    links:
      - db
    volumes:
      - ./oauth2_config.json:/oauth2_config.json


  edge:
    image: ghcr.io/slntopp/nocloud/edge:latest
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
    labels:
      - traefik.enable=true
      - traefik.http.routers.edge.rule=Host(`api.${BASE_DOMAIN}`)
      - traefik.http.routers.edge.rule=PathPrefix("/nocloud.edge.")
      - traefik.http.routers.edge.tls=true
      - traefik.http.routers.edge.tls.certresolver=letsencrypt
      - traefik.http.routers.edge.entrypoints=grpc
      - traefik.http.services.edge.loadbalancer.server.port=8000
      - traefik.http.services.edge.loadbalancer.server.scheme=h2c
    environment:
      LOG_LEVEL: 0
      PORT: 8000
      SIGNING_KEY: "${SIGNING_KEY}"
      RABBITMQ_CONN: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
      REDIS_HOST: redis_settings:6379
    networks:
      - proxy
      - mq
      - redis
    links:
      - db
    volumes:
      - ./oauth2_config.json:/oauth2_config.json

  dns-mgmt:
    image: ghcr.io/slntopp/nocloud/dns-mgmt:latest
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
    labels:
      - traefik.enable=true
      - traefik.http.routers.dns.rule=Host(`api.${BASE_DOMAIN}`)
      - traefik.http.routers.dns.rule=PathPrefix("/nocloud.dns.")
      - traefik.http.routers.dns.tls=true
      - traefik.http.routers.dns.tls.certresolver=letsencrypt
      - traefik.http.routers.dns.entrypoints=grpc
      - traefik.http.services.dns.loadbalancer.server.port=8000
      - traefik.http.services.dns.loadbalancer.server.scheme=h2c
    networks:
      - proxy
      - grpc-internal
      - redis
    environment:
      LOG_LEVEL: 0
      PORT: 8000
      SIGNING_KEY: "${SIGNING_KEY}"
      REDIS_HOST: redis_settings:6379
    volumes:
      - ./oauth2_config.json:/oauth2_config.json

  settings:
    image: ghcr.io/slntopp/nocloud/settings:latest
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
    labels:
      - traefik.enable=true
      - traefik.http.routers.settings.rule=Host(`api.${BASE_DOMAIN}`)
      - traefik.http.routers.settings.rule=PathPrefix("/nocloud.settings.")
      - traefik.http.routers.settings.tls=true
      - traefik.http.routers.settings.tls.certresolver=letsencrypt
      - traefik.http.routers.settings.entrypoints=grpc
      - traefik.http.services.settings.loadbalancer.server.port=8000
      - traefik.http.services.settings.loadbalancer.server.scheme=h2c
    depends_on:
      - redis_settings
    networks:
      - proxy
      - grpc-internal
      - redis
    environment:
      LOG_LEVEL: 0
      PORT: 8000
      SIGNING_KEY: "${SIGNING_KEY}"
      REDIS_HOST: redis_settings:6379
    volumes:
      - ./oauth2_config.json:/oauth2_config.json

  redis_settings:
    image: redis
    restart: always
    command: redis-server --save 60 1
    networks:
      - redis
    volumes:
      - redis-settings-data:/data

  billing:
    image: ghcr.io/slntopp/nocloud/billing:latest
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
    labels:
      - traefik.enable=true
      - traefik.http.routers.billing.rule=Host(`api.${BASE_DOMAIN}`)
      - traefik.http.routers.billing.rule=PathPrefix("/nocloud.billing.")
      - traefik.http.routers.billing.tls=true
      - traefik.http.routers.billing.tls.certresolver=letsencrypt
      - traefik.http.routers.billing.entrypoints=grpc
      - traefik.http.services.billing.loadbalancer.server.port=8000
      - traefik.http.services.billing.loadbalancer.server.scheme=h2c
    depends_on:
      - db
      - settings
    networks:
      - proxy
      - arangodb
      - grpc-internal
      - mq
      - redis
    environment:
      LOG_LEVEL: 0
      PORT: 8000
      SIGNING_KEY: "${SIGNING_KEY}"
      DB_HOST: db:8529
      DB_CRED: "${DB_USER}:${DB_PASS}"
      SETTINGS_HOST: settings:8000
      RABBITMQ_CONN: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
      REDIS_HOST: redis_settings:6379
    links:
      - db
    volumes:
      - ./oauth2_config.json:/oauth2_config.json


  db:
    image: arangodb/arangodb:latest
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.db.entrypoints=https
      - traefik.http.routers.db.rule=Host(`db.${BASE_DOMAIN}`)
      - traefik.http.routers.db.tls=true
      - traefik.http.routers.db.tls.certresolver=letsencrypt
      - traefik.http.services.db.loadbalancer.server.port=8529
    environment:
      ARANGO_ROOT_PASSWORD: "${DB_PASS}"
    volumes:
      - data:/var/lib/arangodb3
    networks:
      - proxy
      - arangodb

  rabbitmq:
    image: rabbitmq:3.9-management
    labels:
      - traefik.enable=true
      - traefik.http.routers.rabbitmq.entrypoints=https
      - traefik.http.routers.rabbitmq.rule=Host(`rbmq.${BASE_DOMAIN}`)
      - traefik.http.routers.rabbitmq.tls=true
      - traefik.http.routers.rabbitmq.tls.certresolver=letsencrypt
      - traefik.http.services.rabbitmq.loadbalancer.server.port=15672
    networks:
      - mq
      - proxy
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_PASS}"
    volumes:
      - ./oauth2_config.json:/oauth2_config.json


  driver-ione:
    image: ghcr.io/slntopp/nocloud-driver-ione:latest
    container_name: driver
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
    restart: always
    networks:
      - grpc-internal
      - mq
    environment:
      DRIVER_TYPE_KEY: ione
      SIGNING_KEY: "${SIGNING_KEY}"
      RABBITMQ_CONN: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
      LOG_LEVEL: 0
    volumes:
      - ./oauth2_config.json:/oauth2_config.json


  driver-virtual:
    container_name: driver-virtual
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
    image: ghcr.io/slntopp/nocloud-driver-virtual:latest
    networks:
      grpc-internal:
      mq:
      redis:
    environment:
      LOG_LEVEL: 0
      DRIVER_TYPE_KEY: empty
      RABBITMQ_CONN: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
      REDIS_HOST: redis_settings:6379
    volumes:
      - ./oauth2_config.json:/oauth2_config.json

#  driver-cpanel:
#    container_name: driver-cpanel
#    restart: always
#    logging:
#      driver: "json-file"
#      options:
#        max-size: "50m"
#    image: ghcr.io/support-pl/nocloud-driver-cpanel:latest
#    labels:
#      - nocloud.driver
#    networks:
#      grpc-internal:
#      mq:
#      redis:
#    environment:
#      LOG_LEVEL: -1
#      DRIVER_TYPE_KEY: cpanel
#      SIGNING_KEY: "${SIGNING_KEY}"
#      REDIS_HOST: redis_settings:6379
#      RABBITMQ_CONN: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/

networks:
  proxy:
    driver: bridge
  grpc-internal:
  arangodb:
    driver: bridge
  redis:
    driver: bridge
  mq:
    driver: bridge

volumes:
  redis-settings-data:
  data:
